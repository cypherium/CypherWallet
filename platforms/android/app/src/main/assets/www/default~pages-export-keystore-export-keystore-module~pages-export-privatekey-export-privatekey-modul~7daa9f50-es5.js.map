{"version":3,"sources":["src/app/providers/http-helper/http-helper.service.ts","src/app/providers/http/http.service.ts","src/app/providers/storage/storage.service.ts","src/app/providers/util/util.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { StorageService } from '../storage/storage.service';\nimport { LoggerService } from '../logger/logger.service';\nimport { HelperService } from '../helper/helper.service';\nimport { GlobalService } from '../global/global.service';\n\nexport declare interface RequestSetting {\n    /**\n     * 是否使用默认api\n     */\n    useDefaultApi?: boolean;\n    /**\n     * 请求结果是否需要缓存\n     */\n    needCache?: boolean;\n    /**\n     * 是否显示loading\n     */\n    showLoading?: boolean;\n\t/**\n\t * 是否忽略错误\n\t */\n    ignoreError?: boolean;\n}\n\n/**\n * http工具类\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpHelperService {\n    static requestCount = 0; // 记录未完成的请求数量,当请求数为0关闭loading,当不为0显示loading\n\n    constructor(public helper: HelperService) {\n    }\n\n    static getDefaultSetting(setting) {\n        const defaultSetting: RequestSetting = {\n            useDefaultApi: true,\n            needCache: false,\n            showLoading: false,\n            ignoreError: false\n        };\n        return setting ? { ...defaultSetting, ...setting } : defaultSetting;\n    }\n\n    static getCacheData(options) {\n        const cacheKey = HttpHelperService.getCacheKey(options);\n        return StorageService.sessionStorage.get(cacheKey) || null;\n    }\n\n    static setCacheData(options, data: any) {\n        const cacheKey = HttpHelperService.getCacheKey(options);\n        StorageService.sessionStorage.set(cacheKey, data);\n    }\n\n    static getCacheKey(options) {\n        const strParams = JSON.stringify(options.params);\n        const strBody = JSON.stringify(options.body);\n        return options.url + strParams + strBody;\n    }\n\n    requestBefore(options, setting: RequestSetting) {\n        this.showLoading(setting);\n        // if (this.helper.isMobile() && GlobalService.showLog) {\n        if (this.helper.isMobile()) {\n            console.log(\"Before request:\" + JSON.stringify(options));\n        } else {\n            LoggerService.log('Before request:', '#3880ff', 'options:', options);\n        }\n    }\n\n    requestSuccess(options) {\n        this.hideLoading();\n        // if (this.helper.isMobile() && GlobalService.showLog) {\n        if (this.helper.isMobile()) {\n            console.log(\"Request succeed for:\" + options.url);\n        } else {\n            LoggerService.log('Request succeed:', '#10dc60', 'options:', options);\n        }\n    }\n\n    requestError(options) {\n        this.hideLoading();\n        // if (this.helper.isMobile() && GlobalService.showLog) {\n        if (this.helper.isMobile()) {\n            console.log(\"Request error for:\" + options.url);\n        } else {\n            LoggerService.log('Request failed:', '#f04141', 'options:', options);\n        }\n    }\n\n    private showLoading(setting: RequestSetting) {\n        ++HttpHelperService.requestCount;\n        setting.showLoading && this.helper.showLoading();\n    }\n\n    private hideLoading() {\n        --HttpHelperService.requestCount === 0 && this.helper.hideLoading();\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, TimeoutError } from 'rxjs';\nimport { LoggerService } from '../logger/logger.service';\nimport { UtilService } from '../util/util.service';\nimport { timeout } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { NativeService } from '../native/native.service';\nimport { HelperService } from '../helper/helper.service';\nimport { HttpHelperService, RequestSetting } from '../http-helper/http-helper.service';\nimport { GlobalService } from '../global/global.service';\nimport { TranslateService } from \"@ngx-translate/core\";\n\n/**\n * 封装angular http\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpService extends HttpHelperService {\n\n    constructor(public http: HttpClient,\n        public helper: HelperService,\n        private translateService: TranslateService,\n        public native: NativeService) {\n        super(helper);\n    }\n\n    public get(url: string, params: any = {}, setting: RequestSetting = {}) {\n        console.log(\"getgetget\", url);\n        const options = {\n            method: 'GET',\n            url: url,\n            params\n        };\n        return this.doRequest(options, setting);\n    }\n\n    public post(url: string, body: any = {}, setting: RequestSetting = {}): Observable<any> {\n        const options = {\n            method: 'POST',\n            url: url,\n            body,\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json; charset=UTF-8'\n            })\n        };\n        return this.doRequest(options, setting);\n    }\n\n    public delete(url: string, params: any = {}, setting: RequestSetting = {}) {\n        const options = {\n            method: 'DELETE',\n            url: url,\n            params\n        };\n        return this.doRequest(options, setting);\n    }\n\n    public postFormData(url: string, params: any = {}, setting: RequestSetting = {}): Observable<any> {\n        const options = {\n            method: 'POST',\n            url: url,\n            params,\n            headers: new HttpHeaders({\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n            })\n        };\n        return this.doRequest(options, setting);\n    }\n\n    public doRequest(options, setting: RequestSetting) {\n        const defaultSetting = HttpHelperService.getDefaultSetting(setting);\n        return defaultSetting.useDefaultApi ? this.defaultRequest(options, defaultSetting) : this.request(options, defaultSetting);\n    }\n\n    /**\n     * 一个app可能有多个后台接口服务(api),针对主api添加业务处理\n     */\n    public defaultRequest(options, setting: RequestSetting): Observable<any> {\n        //  使用默认API:APP_SERVE_URL\n        if (!options.url.startsWith('http')) {\n            options.url = environment.appServerUrl + options.url;\n        }\n        console.log(\"defaultRequest:\" + options.url);\n        //  添加请求头\n        // if (GlobalService.token) {\n        //     options.headers = options.headers || new HttpHeaders();\n        //     options.headers = options.headers.set('Authorization', `Bearer ${GlobalService.token}`);  // 注：set append返回新的HttpHeaders\n        // }\n        return Observable.create(observer => {\n            this.request(options, setting).subscribe(res => {\n                observer.next(res); // data是主api约定返回的数据\n            }, err => {\n                observer.error(err);\n            });\n        });\n    }\n\n    public request(ops, set: RequestSetting): Observable<any> {\n        const options = {\n            url: '',\n            method: 'POST',\n            body: null,\n            params: null,\n            urlWithParams: false,\n            headers: null,\n            reportProgress: false,\n            withCredentials: false,\n            responseType: 'json',\n            header: {\n                \"Content-Type\": \"application/json\",\n                'Accept': 'application/json, text/plain',\n                \"cache-control\": \"no-cache\",\n                \"Access-Control-Allow-Origin\": \"*\",\n                \"Access-Control-Allow-Headers\": \"Origin, Content-Type, X-Auth-Token, Accept, Authorization, X-Request-With, Access-Control-Request-Method, Access-Control-Request-Headers\",\n                \"Access-Control-Allow-Credentials\": \"true\",\n                \"Access-Control-Allow-Methods\": \"GET, POST, DELETE, PUT, OPTIONS, TRACE, PATCH, CONNECT\",\n            },\n            ...ops\n        };\n        const setting = HttpHelperService.getDefaultSetting(set);\n        options.url = UtilService.formatUrl(options.url);\n        console.log(JSON.stringify(set));\n        console.log(\"The request url:\" + options.url);\n        return Observable.create(observer => {\n            // 如果需要缓存，先尝试从sessionStorage中取数据\n            if (setting.needCache) {\n                const cacheResult = HttpHelperService.getCacheData(options);\n                if (cacheResult) {\n                    observer.next(cacheResult);\n                    return;\n                }\n            }\n            this.requestBefore(options, setting);\n            this.http.request(options.method, options.url, options).pipe(\n                timeout(environment.requestTimeout)\n            ).subscribe((res: any) => {\n                setting.needCache && HttpHelperService.setCacheData(options, res); // 如果需要缓存，保存数据到sessionStorage中\n                let code = res.err_no; //An error will prompt you\n                if (code && GlobalService.errorCode[code] && !set.ignoreError) {\n                    this.helper.toast(GlobalService.errorCode[code]);\n                }\n                if (!this.helper.IsMobile) {\n                    LoggerService.log('Response', '#10dc60', options.url, res);\n                } else if (GlobalService.showLog) {\n                    console.log(\"Request response:\" + JSON.stringify(res) + \" with url:\" + options.url);\n                }\n                if (code && !set.ignoreError) {\n                    this.requestError(options);\n                    observer.error(this.requestFailedHandle(options.url, res.message));\n                } else {\n                    observer.next(res);\n                    this.requestSuccess(options);\n                }\n            }, err => {\n                if (!set.ignoreError) {\n                    this.requestError(options);\n                    observer.error(this.requestFailedHandle(options.url, err));\n                }\n            });\n        });\n    }\n\n    async getTranslate(key) {\n        let value: string = await new Promise((resolve, reject) => {\n            this.translateService.get(key).subscribe((value) => {\n                resolve(value)\n            })\n        })\n        return value;\n    }\n\n    /**\n     * Handle the failed request event\n     */\n    private async requestFailedHandle(url: string, err: HttpErrorResponse) { // : Response\n        const status = err && err.status;\n        let msg = await this.getTranslate('REQUEST_ERROR');\n        // As agreed with the background, a status code of 400 is a business exception\n        if (status === 400) {\n            const errData = err.error;\n            //  Invalid or expired 401 Token requires re-login\n            if (errData.code === 401) {\n                let error = await this.getTranslate('PAASSWORD_EXPIRED');\n                this.helper.toast(error);\n            } else {\n                let tips = await this.getTranslate('TIPS');\n                this.helper.alert(tips, GlobalService.errorCode[errData.code] || msg);\n            }\n            return errData;\n        }\n        if (this.helper.isMobile() && !this.native.isConnecting()) {\n            let info = await this.getTranslate('NETWORK_ERROR');\n            this.helper.alert(info);\n        } else if (err instanceof TimeoutError) {\n            let tips = await this.getTranslate('TIPS');\n            let info = await this.getTranslate('NETWORK_TIMEOUT');\n            this.helper.alert(tips, info);\n        } else {\n            if (status === 0) {\n                msg = await this.getTranslate('BACKEND_ERROR');\n            } else if (status === 404) {\n                msg = await this.getTranslate('BACKEND_NOT_EXIST');\n            } else if (status === 500) {\n                msg = await this.getTranslate('BACKEND_ERROR1')\n            }\n            let tips = await this.getTranslate('REQUEST_FAILURE');\n            this.helper.alert(tips, msg);\n            LoggerService.http(err, {\n                url,\n                status\n            });\n        }\n        return err;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * 缓存工具类\n * 注：代码中务必使用此方法缓存数据，方便以后切换缓存机制\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class StorageService {\n    public static sessionStorage = {\n        set(key: string, value: any) {\n            sessionStorage.setItem(key, JSON.stringify(value));\n        },\n        get(key: string) {\n            const jsonString = sessionStorage.getItem(key);\n            return jsonString ? JSON.parse(jsonString) : null;\n        },\n        remove(key: string) {\n            sessionStorage.removeItem(key);\n        },\n        clear() {\n            sessionStorage.clear();\n        }\n    };\n\n    public static localStorage = {\n        set(key: string, value: any) {\n            localStorage.setItem(key, JSON.stringify(value));\n        },\n        get(key: string) {\n            const jsonString = localStorage.getItem(key);\n            return jsonString ? JSON.parse(jsonString) : null;\n        },\n        remove(key: string) {\n            localStorage.removeItem(key);\n        },\n        clear() {\n            localStorage.clear();\n        }\n    };\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * 工具类：存放和业务无关的公共方法\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UtilService {\n    /**\n     * 日期对象转为日期字符串\n     * @param date 需要格式化的日期对象\n     * @param sFormat 输出格式,默认为yyyy-MM-dd                        年：y，月：M，日：d，时：h，分：m，秒：s\n     * @example  dateFormat(new Date())                               \"2017-02-28\"\n     * @example  dateFormat(new Date(),'yyyy-MM-dd')                  \"2017-02-28\"\n     * @example  dateFormat(new Date(),'yyyy-MM-dd HH:mm:ss')         \"2017-02-28 13:24:00\"   ps:HH:24小时制\n     * @example  dateFormat(new Date(),'yyyy-MM-dd hh:mm:ss')         \"2017-02-28 01:24:00\"   ps:hh:12小时制\n     * @example  dateFormat(new Date(),'hh:mm')                       \"09:24\"\n     * @example  dateFormat(new Date(),'yyyy-MM-ddTHH:mm:ss+08:00')   \"2017-02-28T13:24:00+08:00\"\n     * @example  dateFormat(new Date('2017-02-28 13:24:00'),'yyyy-MM-ddTHH:mm:ss+08:00')   \"2017-02-28T13:24:00+08:00\"\n     */\n    static dateFormat(date: Date, sFormat: String = 'yyyy-MM-dd'): string {\n        const time = {\n            Year: 0,\n            TYear: '0',\n            Month: 0,\n            TMonth: '0',\n            Day: 0,\n            TDay: '0',\n            Hour: 0,\n            THour: '0',\n            hour: 0,\n            Thour: '0',\n            Minute: 0,\n            TMinute: '0',\n            Second: 0,\n            TSecond: '0',\n            Millisecond: 0\n        };\n        time.Year = date.getFullYear();\n        time.TYear = String(time.Year).substr(2);\n        time.Month = date.getMonth() + 1;\n        time.TMonth = time.Month < 10 ? '0' + time.Month : String(time.Month);\n        time.Day = date.getDate();\n        time.TDay = time.Day < 10 ? '0' + time.Day : String(time.Day);\n        time.Hour = date.getHours();\n        time.THour = time.Hour < 10 ? '0' + time.Hour : String(time.Hour);\n        time.hour = time.Hour < 13 ? time.Hour : time.Hour - 12;\n        time.Thour = time.hour < 10 ? '0' + time.hour : String(time.hour);\n        time.Minute = date.getMinutes();\n        time.TMinute = time.Minute < 10 ? '0' + time.Minute : String(time.Minute);\n        time.Second = date.getSeconds();\n        time.TSecond = time.Second < 10 ? '0' + time.Second : String(time.Second);\n        time.Millisecond = date.getMilliseconds();\n\n        return sFormat.replace(/yyyy/ig, String(time.Year))\n            .replace(/yyy/ig, String(time.Year))\n            .replace(/yy/ig, time.TYear)\n            .replace(/y/ig, time.TYear)\n            .replace(/MM/g, time.TMonth)\n            .replace(/M/g, String(time.Month))\n            .replace(/dd/ig, time.TDay)\n            .replace(/d/ig, String(time.Day))\n            .replace(/HH/g, time.THour)\n            .replace(/H/g, String(time.Hour))\n            .replace(/hh/g, time.Thour)\n            .replace(/h/g, String(time.hour))\n            .replace(/mm/g, time.TMinute)\n            .replace(/m/g, String(time.Minute))\n            .replace(/ss/ig, time.TSecond)\n            .replace(/s/ig, String(time.Second))\n            .replace(/fff/ig, String(time.Millisecond));\n    }\n\n    /**\n     * 返回字符串长度，中文计数为2\n     */\n    static strLength(str: string): number {\n        let len = 0;\n        for (let i = 0, length = str.length; i < length; i++) {\n            str.charCodeAt(i) > 255 ? len += 2 : len++;\n        }\n        return len;\n    }\n\n    /**\n     * 密码强度 返回：low middle high\n     */\n    static checkPass(pwd) {\n        let m = 0;\n        if (pwd.length <= 6) {\n            return 'low'; // 密码长度小于等于6\n        }\n        if (/\\d/.test(pwd)) {\n            m++; // 纯数字密码\n        }\n        if (/[a-z]/.test(pwd)) {\n            m++; // 密码包含小写字母\n        }\n        if (/[A-Z]/.test(pwd)) {\n            m++; // 密码包含大写字母\n        }\n        if (/\\W/.test(pwd)) {\n            m++; // 密码包含特殊字符\n        }\n        if (pwd.length > 15) {\n            m = 4; // 密码长度大于15\n        }\n        if (m < 2) {\n            return 'low';\n        }\n        if (m === 2) {\n            return 'middle';\n        }\n        if (m >= 3) {\n            return 'high';\n        }\n    }\n\n    /**\n     * 把url中的双斜杠替换为单斜杠\n     * 如:http://localhost:8080//api//demo.替换后http://localhost:8080/api/demo\n     */\n    static formatUrl(url = ''): string {\n        let index = 0;\n        if (url.startsWith('http')) {\n            index = 7;\n        }\n        return url.substring(0, index) + url.substring(index).replace(/\\/\\/*/g, '/');\n    }\n\n    /**\n     * Produces a random 32-bit length string\n     */\n    static uuid() {\n        let text = '';\n        const possible = 'abcdef0123456789';\n        for (let i = 0; i < 19; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text + new Date().getTime();\n    }\n\n    /**\n     * Convert the image to base64 string format based on the image path\n     */\n    static convertImgToBase64(url: string, callback: Function, width: number = null, height: number = null, outputFormat = 'image/jpg') {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onload = function () {\n            const canvas = <HTMLCanvasElement>document.createElement('canvas');\n            canvas.width = width || img.width;\n            canvas.height = height || img.height;\n            const context = canvas.getContext('2d');\n            context.drawImage(img, 0, 0, canvas.width, canvas.height);\n            const imgBase64 = canvas.toDataURL(outputFormat);\n            if (callback) {\n                callback(imgBase64);\n            }\n        };\n        img.src = url;\n    }\n}\n"],"sourceRoot":"webpack:///","file":"default~pages-export-keystore-export-keystore-module~pages-export-privatekey-export-privatekey-modul~7daa9f50-es5.js"}
